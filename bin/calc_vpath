#!/usr/bin/env ruby
# A tool for calculating VPATHs for stage makefiles. A VPATH is a
# search path for prerequisites.

require 'optparse'
require 'pathname'

include_current  = true
root             = Pathname("../..").expand_path(__FILE__)
lib_dir          = root + "lib"
book_dir         = ENV.fetch("OP_BOOK_DIR")   { Dir.pwd }
vendor_dir       = ENV.fetch("OP_VENDOR_DIR") { File.join(book_dir,"vendor") }
stage            = ENV.fetch("OP_STAGE")      { "finished" }
platform         = ENV.fetch("OP_PLATFORM")   { "neutral" }
stages           = ENV.fetch("OP_STAGES")     { "" }.split
absolute         = false
list_all         = false
reverse_order    = false

OptionParser.new do |options|
  options.on("--[no-]include-current", "Include paths from current stage") do |value|
    include_current = value
  end
  options.on("--book-dir DIR", "The book project root directory") do |value|
    book_dir = value
  end
  options.on("--vendor-dir DIR", "The vendor directory") do |value|
    vendor_dir = value
  end
  options.on("--stage STAGE", "The current stage") do |value|
    stage = value
  end
  options.on("--platform PLATFORM", "The current platform") do |value|
    platform = value
  end
  options.on("--stages a,b,c", Array, "The defined stages") do |value|
    stages = value
  end
  options.on("--[no-]absolute", "Output an absolute path") do |value|
    absolute = value
  end
  options.on("-a", "--[no-]-all", "List all matching files") do |value|
    list_all = value
  end
  options.on("-r", "--[no-]-reverse", "List files least- to most-specific") do
    |value|
    reverse_order = value
  end
end.parse!

mode = ARGV.shift || :vpath

stage_index      = stages.index(stage)

last_stage_index = include_current ? stage_index : (stage_index - 1)
previous_stages  = stages[0..last_stage_index].reverse
vpath = []
previous_stages.each do |stage|
  vpath << File.join(book_dir, "build", stage, platform)
  # Always include the neutral platform directory as well as the
  # platform-specific path
  vpath << File.join(book_dir, "build", stage, "neutral")

  vpath << (lib_dir + "stages" + stage + platform).to_s
  vpath << (lib_dir + "stages" + stage).to_s
end
vpath << File.join(book_dir, platform)
vpath << book_dir
vpath << vendor_dir
vpath << (lib_dir + "platforms" + platform).to_s

case mode.to_sym
when :vpath
  print vpath.uniq.join(":")
when :which
  file    = ARGV.shift
  minimum = list_all ? 0 : 1

  matches = vpath.map{|path|
    glob_matches = Pathname.glob(Pathname(path) + file).sort
  }.flatten

  unless absolute
    matches.map! do |file|
      file.relative_path_from(Pathname(book_dir).expand_path)
    end
  end

  unless list_all
    matches = matches.take(1)
  end

  if reverse_order
    matches.reverse!
  end

  puts *matches

  exit(matches.size >= minimum)
when :makepath                # path for makefile inclusion search
  makepath = [(lib_dir + "stages" + stage + platform).to_s,
              (lib_dir + "stages" + stage).to_s,
              lib_dir.to_s]
  puts makepath.join(" ")
  exit 0
else
  raise NotImplementedError, "Unknown mode '#{mode}'"
end
